# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
  *i*) ;;
  *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=-1
HISTFILESIZE=-1

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
  debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
  xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes;
if [ -n "$force_color_prompt" ]; then
  if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
  else
    color_prompt=
  fi
fi

if [ "$color_prompt" = yes ]; then
#  PS1='\n\[\e]0;\u@\h: \W\a\]${debian_chroot:+($debian_chroot)}\[\033[01;11m\]\u@\h\[\033[00m\]:[\[\033[01;36m\]\W\[\033[00m\]]\n$ _> '
#  PS1='\n${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:[\[\033[01;36m\]\w\[\033[00m\]]\n$ _> '
  PS1='\n${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:[\[\033[01;36m\]\w\[\033[00m\]]\n$ _> '
else
  PS1='${debian_chroot:+($debian_chroot)}\u@\h:[\W]$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
  PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \W\a\]$PS1"
  ;;
*)
  ;;
esac

# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

if [ $(hostname)  = "MORDOR" ]; then
  # usefull ambient variable
  export MOKAICON=/usr/share/icons/Moka/256x256/apps
  export DADOS=/$HOME/.Dados
  export DESKTOP=$HOME/Desktop
  export DOWNLOADS=$HOME/Downloads
  export MUSIC=$HOME/Music
  export PICTURES=$HOME/Pictures
  export PUBLIC=$HOME/Public
  export TEMPLATES=$HOME/Templates
  export VIDEOS=$HOME/Videos
  export DOCUMENTS=$HOME/Documents
  export GAMES=$DOWNLOADS/Games
  export DROPBOX=$DOCUMENTS/Dropbox
  export LUCAS=$DROPBOX/Lucas
  export NOTES=$DOCUMENTS/Dropbox/Lucas/notes
  export VIMRUNTIME=/usr/share/vim/vim74
  # GIT repos
  export GIT=$LUCAS/debian/ConfFiles
  export GIT=$GIT:$LUCAS/Programming/Java
  export GIT=$GIT:$LUCAS/Programming/PresentationHtml
  export GIT=$GIT:$LUCAS/Programming/Projects
  export GIT=$GIT:$LUCAS/UFPel/2016/2016-1/AED/AED_git
  export GIT=$GIT:$LUCAS/UFPel/2016/2016-1/AOC/Tetris-AOC
  export GIT=$GIT:$LUCAS/UFPel/2016/2016-1/POO/Trab-POO
  export GIT=$GIT:$LUCAS/UFPel/Projetos/LUPS/ERAD-2016
  export GIT=$GIT:$LUCAS/UFPel/Projetos/LUPS/LindaTS
  # UFPel vars
  export UFPEL=$LUCAS/UFPel
  export LUPS=$UFPEL/Projetos/LUPS
  export WHEREDOWEGO=$LUPS/LindaTS
  export AED=$UFPEL/2016/2016-1/AED
  export AOC=$UFPEL/2016/2016-1/AOC
  export Calculo2=$UFPEL/2016/2016-1/Calculo2
  export LF=$UFPEL/2016/2016-1/LF
  export POO=$UFPEL/2016/2016-1/POO
  # JAVA_HOME for Maven (GAppEnine)
  export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-amd64
  export JAVA_DOC=$JAVA_HOME/docs/api
  # Path export
  export PATH=$PATH:/opt/teamviewer/tv_bin/wine/bin
  export PATH=$PATH:/opt/android-studio/bin
  export PATH=$PATH:/opt/android-sdk-linux/tools
  export PATH=$PATH:/opt/VirtualGL/bin
  export PATH=$PATH:/opt/netbeans-8.0.2/bin
  # Intel compiler utilities
  export PATH=$PATH:/opt/intel/bin
  export LD_LIBRARY_PATH=/opt/intel/lib
  export DYLD_LIBRARY_PATH=/opt/intel/lib
  export MANPATH=$MANPATH:/opt/intel/man
  # load some setups
  source /opt/intel/cnc/1.0.100/bin/cncvars.sh
elif [[ $(hostname) = "lups"* ]]; then
  # GIT repos
  export GIT=$HOME/Documents/ConfFiles
  export GIT=$GIT:$HOME/Documents/Java
  export GIT=$GIT:$HOME/Documents/AED
  export GIT=$GIT:$HOME/Documetns/Tetris-AOC
  export GIT=$GIT:$HOME/Documents/Trab-POO
  export GIT=$GIT:$HOME/Documents/LindaTS
fi


# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# Uses the cllinsdictionary to define a word, and shows only the part
# that is relevant for the context
define() {
  curl -s "http://www.collinsdictionary.com/dictionary/english/$*" | sed -n '/class="def"/p' | awk '{gsub(/.*<span class="def">|<\/span>.*/,"");print}' | sed "s/<[^>]\+>//g";
}

# Used to convert some manual to a PDF file
man2pdf() {
  man -t $1 | ps2pdf - > $1.pdf
}

# Improves the man
man ()  {
  /usr/bin/man $@ 2> /dev/null || less $@ 2> /dev/null || less $DOCUMENTS/man_$@.txt 2> /dev/null || less $DOCUMENTS/man_$(echo $A | cut -d "=" -f 2).txt 2> /dev/null || cowsay "No trace of manual page"; 
}
toup () {
  echo $1 | tr '[:lower:]' '[:upper:]'
}

tolow () {
  echo $1 | tr '[:upper:]' '[:lower:]'
}

flipacoin () {
  [ $[ $RANDOM % 2] == 0 ] && echo "Heads" || echo "Tails";
}

getweather () { 
  if [ -n $@ ]; then
    echo $@
    curl http://wttr.in/$@;
  else
    curl http://wttr.in/Pelotas;
  fi
}

checkgit () { 
  if [ -z $GIT ]; then
    echo "The 'GIT' system variable is not set";
    return;
  fi
  BACK=$(whereami); 
  for j in $(echo $GIT | tr ":" "\n"); {
    cd $j; 
    git status 2> /dev/null | tr "\n" "+" | grep -v "nothing to commit" | tr "+" "\n"; 
  }; 
  cd $BACK;
}
